Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_lmm
trait_lab_sex
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 1)
length(unique(trait_lab_sex[[1]][,"Line"]))
trait_lab_sex[[1]][,"Line"]
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
#n_genot_reps <- nrow(data) / length(unlist(unique(data[,genot])))
if (n_rep_genot >= 2) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot)
} else {
d <- group_by(data, .data[[genot]]) %>% filter(n() >= min_n_genot)
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
trait_lab_sex[[1]][,"Line"]
length(unique(trait_lab_sex[[1]][,"Line"]))
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 1)
n_unique_genot
genot
length(unlist(unique(trait_lab_sex[[1]][,"Line"])))
trait_lab_sex[[1]] %>% group_by(.data[[genot]]) %>% filter(n() >= 1)
trait_lab_sex[[1]] %>% group_by(.data[[genot]]) %>% filter(n() >= 2)
d <- trait_lab_sex[[1]] %>% group_by(.data[[genot]]) %>% filter(n() >= 2)
d
length(unlist(unique(d$Line)))
print(d, n 47)
print(d, n = 47)
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
#n_genot_reps <- nrow(data) / length(unlist(unique(data[,genot])))
if (n_rep_genot < 2) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot)
} else {
d <- group_by(data, .data[[genot]]) %>% filter(n() >= min_n_genot)
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 1)
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 2)
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 3)
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 4)
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
#n_genot_reps <- nrow(data) / length(unlist(unique(data[,genot])))
if (n_rep_genot < 2) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
d <- group_by(data, .data[[genot]]) %>% filter(n() >= min_n_genot)
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 4)
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 4)
H2_lmm(trait_lab_sex[[1]], "Value", "Line", 3)
bind_rows(H2_lmm(trait_lab_sex[[1]], "Value", "Line", 4), H2_lmm(trait_lab_sex[[1]], "Value", "Line", 3))
droseu_keep <- droseu[!names(droseu) %in% c("cets", "lsm", "lsp")]
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
i
trait_lab_sex
bind_rows(H2_lmm(trait_lab_sex[[2]], "Value", "Line", 4), H2_lmm(trait_lab_sex[[2]], "Value", "Line", 3))
bind_rows(H2_lmm(trait_lab_sex[[3]], "Value", "Line", 4), H2_lmm(trait_lab_sex[[3]], "Value", "Line", 3))
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2
lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 2))
h2_lmm
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
bind_rows(H2_lmm(trait_lab_sex[[3]], "Value", "Line", 1), H2_lmm(trait_lab_sex[[3]], "Value", "Line", 1))
bind_rows(H2_lmm(trait_lab_sex[[2]], "Value", "Line", 1), H2_lmm(trait_lab_sex[[2]], "Value", "Line", 1))
d
d <- trait_lab_sex[[2]] %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
d <- trait_lab_sex[[2]] %>% group_by(.data[[genot]]) %>% filter(n() >= 1)
d
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
#n_genot_reps <- nrow(data) / length(unlist(unique(data[,genot])))
if (n_rep_genot < 2) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
if (n_rep_genot < 2) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
d <- trait_lab_sex[[2]] %>% group_by(.data[[genot]]) %>% filter(n() >= 1)
d
bind_rows(H2_lmm(trait_lab_sex[[2]], "Value", "Line", 1), H2_lmm(trait_lab_sex[[2]], "Value", "Line", 1))
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
if (n_rep_genot < 2 | n_rep_genot == n_unique_genot) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs2.csv", row.names = F)
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
if (n_rep_genot < 2 | n_unique_genot == nrow(d)) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 1))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs2.csv", row.names = F)
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 2))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs2.csv", row.names = F)
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 10))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs2.csv", row.names = F)
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 2))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs2.csv", row.names = F)
lrc <- read.csv("LinearModelsPop/all_models_line_random_coefs.csv")
lrc_trait_sex <- group_split(lrc, Trait, Sex)
h2_between <- bind_rows(lapply(lrc_trait_sex, function(x) x[1,c("Trait", "Sex")]))
h2_lmm_between <- bind_rows(lapply(lrc_trait_sex, H2_lmm, "Coef", "Line", 2))
h2_between <- bind_cols(h2_between, h2_lmm_between)
write.csv(h2_between, "Heritability/broad_sense_herit_between_labs.csv", row.names = F)
lrc <- read.csv("LinearModelsPop/all_models_line_random_coefs.csv")
lrc_trait_sex <- group_split(lrc, Trait, Sex)
h2_between <- bind_rows(lapply(lrc_trait_sex, function(x) x[1,c("Trait", "Sex")]))
h2_lmm_between <- bind_rows(lapply(lrc_trait_sex, H2_lmm, "Coef", "Line", 4))
h2_between <- bind_cols(h2_between, h2_lmm_between)
write.csv(h2_between, "Heritability/broad_sense_herit_between_labs.csv", row.names = F)
lrc <- read.csv("LinearModelsPop/all_models_line_random_coefs.csv")
lrc_trait_sex <- group_split(lrc, Trait, Sex)
h2_between <- bind_rows(lapply(lrc_trait_sex, function(x) x[1,c("Trait", "Sex")]))
h2_lmm_between <- bind_rows(lapply(lrc_trait_sex, H2_lmm, "Coef", "Line", 3))
h2_between <- bind_cols(h2_between, h2_lmm_between)
write.csv(h2_between, "Heritability/broad_sense_herit_between_labs.csv", row.names = F)
###### some things to consider
# for between labs H2, instead of using mean Line values, one could consider using Line random coefficients extracted from individual labs linear mixed models
# for LSP and CETS, H2 can be calculated for Population
# what should be the input data when measures have been made at the individual level? is each ind a line replicate or should we use the average value per replicate vial?
##### clean workspace
rm(list = ls())
##### libraries
library(tidyverse)
library(lme4)
##### set working directory
setwd("~/Work/UNIFR/GitHub/DrosEU_PhenotypingWG/")
##### load data
droseu <- readRDS("Data/droseu_master_list_2022-05-02.rds")
line_re <- read.csv("LinearModelsPop/all_models_line_random_effects.csv")
##### functions
# this function, based on a linear mixed model (lmer) in which genotypes (i.e. lines) are included as random-effect variables, allows to extract genetic and environmental variances to compute broad sense heritability, H2.
# usage: H2_lmm(data = via_df, phenot = "via", genot = "Line")
# d: data.frame with columns for trait values and genotypes
# phenot: trait values
# genot: genotype ids
H2_lmm <- function(data, phenot, genot, min_rep_genot = 2) {
require("lme4")
# make sure that H can be computed by checking that genotypes have been measured more than once. If not the case H cannot be computed and NA is returned.
n_unique_genot <- length(unlist(unique(data[,genot])))
d <- data %>% group_by(.data[[genot]]) %>% filter(n() >= min_rep_genot)
n_rep_genot <- length(unlist(unique(d[,genot])))
if (n_rep_genot < 2 | n_unique_genot == nrow(d)) {
#if(length(unlist(unique(data[,genot]))) == nrow(data)){
#data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N = n_genot_reps)
data.frame(H2 = NA, Vp = NA, Vg = NA, Ve = NA, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = "Not enough genot replicates")
} else {
# build and run the lmer model with genot as random effect variable
lmm <- lmer(as.formula(paste0(phenot, "~1 + 1|", genot)), data = d)
# extract variance components
lmm.varcor <- as.data.frame(summary(lmm)$varcor)
# variance explained by genot
Vg <- lmm.varcor[lmm.varcor$grp == genot, "vcov"]
# variance explained by environment (residuals)
Ve <- lmm.varcor[lmm.varcor$grp == "Residual", "vcov"]
# total variance
Vp <- Vg + Ve
# calculate H2
H2 <- Vg/Vp
# output
w <- summary(lmm)$optinfo$conv$lme4$messages
data.frame(H2, Vp, Vg, Ve, Genot = genot, N_unique_genot = n_unique_genot, Min_rep_genot = min_rep_genot, N_rep_genot = n_rep_genot, Warnings = ifelse(length(w) != 0, w, "NA"))
#data.frame(n_unique_genot, min_rep_genot, n_rep_genot, H2, Vp, Vg, Ve, Genot = genot, N = n_genot_reps, Warnings = ifelse(length(w) != 0, w, "NA"))
}
}
# n unique genot
# minimal genot rep
# n rep genot
#####
var_list <- c("CCRT_seconds", "ZT_hours_MESA", "ZT_hours_LSPR", "Period_MESA", "Period_LSPR", "Rhythmicity_LSPR_amplitude", "Rhythmicity_JTK_p_BH_corrected", "CSM_PropDead_ED_asin", "Prop_Max_Stage9_asin", "DT_EggAdult", "DT_EggPupa", "DW_micrograms", "NumberOfAdultsEclosed", "TimeDeath_min", "Period", "CircPhase", "AbsPhase", "ND_log2", "Activity", "LSL_AgeAtDeath_days", "LSM_AgeAtDeath_days", "LSP_AgeAtDeath_days", "PercT4_asin", "PercT5_asin", "PercT6_asin", "TotalPerc_asin", "AgeAtDeath_hours", "TL_micrometers", "ProportionEggtoAdultSurvival_asin", "CentroidSizeLeft_micrometers", "CentroidSizeRight_micrometers")
# exclude traits for which H2 can't be calculated
droseu_keep <- droseu[!names(droseu) %in% c("cets", "lsm", "lsp")]
# loop over traits
h2_within <- list()
for (i in 1:length(droseu_keep)) {
trait <- droseu_keep[[i]]
a <- dplyr::select(trait, contains(c("Supervisor.PI", "Line", "Sex", var_list)))
b <- pivot_longer(a, cols = contains(var_list), names_to = "Trait", values_to = "Value")
if ("Sex" %in% colnames(b)) {
trait_lab_sex <- group_split(b, Supervisor.PI, Sex, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Sex", "Trait")])
} else {
trait_lab_sex <- group_split(b, Supervisor.PI, Trait)
h2 <- lapply(trait_lab_sex, function(x) x[1,c("Supervisor.PI", "Trait")])
}
trait_lab_sex <- lapply(trait_lab_sex, filter, !Value %in% c(-Inf, Inf))
h2 <- bind_rows(h2)
h2_lmm <- bind_rows(lapply(trait_lab_sex, H2_lmm, "Value", "Line", 2))
h2_within[[i]] <- bind_cols(h2, h2_lmm)
}
h2_within <- bind_rows(h2_within)
write.csv(h2_within, "Heritability/broad_sense_herit_within_labs.csv", row.names = F)
##### between labs using line random coefficients
lrc <- read.csv("LinearModelsPop/all_models_line_random_coefs.csv")
lrc_trait_sex <- group_split(lrc, Trait, Sex)
h2_between <- bind_rows(lapply(lrc_trait_sex, function(x) x[1,c("Trait", "Sex")]))
h2_lmm_between <- bind_rows(lapply(lrc_trait_sex, H2_lmm, "Coef", "Line", 2))
h2_between <- bind_cols(h2_between, h2_lmm_between)
write.csv(h2_between, "Heritability/broad_sense_herit_between_labs.csv", row.names = F)
