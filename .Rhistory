unlist %>% sort %>% paste(collapse = "_")
}
co[[j]] <- group_by(co[[j]], Trait, Sex, Labs) %>%
distinct(Labs, .keep_all = TRUE)
}
}
cor_pearson[[i]] <- bind_rows(co)
}
cor_pearson <- bind_rows(cor_pearson)
cor_pearson <- cor_pearson %>%
mutate(Method = "Pearson",
Group = paste(Trait, Sex),
Cutoff = as.factor(ifelse(P < 0.05, 0, 1)))
###### modify below
stats_text <- cor_pearson %>%
group_by(Trait, Sex) %>%
mutate(nl = paste0("n = ", length(unique(Lab1)) + 1),
nc = paste0("nc = ", n()),
ncs = paste0("ncs = ", sum(Cutoff == 0))) %>%
ungroup() %>%
mutate(ymax = max(-log10(P)),
xmin = min(R)) %>%
select(Group, nl, nc, ncs, xmin, ymax) %>%
distinct()
pop_cor <- ggplot(cor_pearson, aes(x = R, y = -log10(P))) +
geom_hline(yintercept = -log10(0.05), linetype = 2, size = 0.5, col = "red") +
geom_vline(xintercept = 0, size = 0.5, col = "grey80") +
geom_point(aes(fill = Cutoff), size = 2, pch = 21, color = "black") +
facet_wrap(Group ~ ., ncol = 7) +
scale_x_continuous(breaks = c(-0.5, 0, 0.5, 0.75)) +
theme_bw(14) +
labs(x = "Pearson's correlation coefficient", title = "Pairwise lab correlations - Population level - Pearson's coefficients") +
theme(legend.position = "none",
panel.grid = element_blank()) +
geom_text(data = stats_text, aes(label = paste(nl, nc, ncs, sep = "\n"), x = xmin, y = ymax), hjust = 0, vjust = 1, size = 3.5)
######### modify above
##### save facet plot
ggsave(pop_cor, filename = "LabCorrelations/lab_correlation_pop_pearson.pdf", width = 11.69, height = 8.27)
########### POP LEVEL SPEARMAN ##########
estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "pop_model_estimates.rds")
estimates <- estimates[-grep("LA_lmers", estimates)]
estimates <- estimates[-grep("Dia_lmers", estimates)]
cor_spearman <- list()
for (i in 1:length(estimates)) {
# get data in and reformat
f <- estimates[i]
e <- readRDS(f) %>%
dplyr::select(Trait, Sex, Population, Lab, Estimate) %>%
pivot_wider(names_from = c("Lab"), values_from = Estimate) %>%
group_split(Trait, Sex)
# get correlations
co <- list()
for (j in 1:length(e)) {
cols_ok <- !apply(e[[j]], 2, function(x) all(is.na(x)))
e_sub <- dplyr::select(e[[j]], names(cols_ok)[cols_ok])
if (ncol(e_sub) > 4) {
if (ncol(e_sub) == 5) {
co[[j]] <- cor_test(e_sub, -c(Sex, Population, Trait), method = "spearman")
} else {
co[[j]] <- cor_mat(e_sub, -c(Sex, Population, Trait), method = "spearman") %>% cor_gather()
}
co[[j]] <- filter(co[[j]], var1 != var2) %>%
rename(Lab1 = var1, Lab2 = var2, R = cor, P = p) %>%
mutate(Sex = unique(e_sub$Sex),
Trait = unique(e_sub$Trait)) %>%
dplyr::select(Trait, Sex, Lab1, Lab2, R, P)
co[[j]]$Labs <- "NA"
for (r in 1:nrow(co[[j]])) {
co[[j]]$Labs[r] <- co[[j]][r, c("Lab1", "Lab2")] %>%
unlist %>% sort %>% paste(collapse = "_")
}
co[[j]] <- group_by(co[[j]], Trait, Sex, Labs) %>%
distinct(Labs, .keep_all = TRUE)
}
}
cor_spearman[[i]] <- bind_rows(co)
}
cor_spearman <- bind_rows(cor_spearman)
cor_spearman <- cor_spearman %>%
mutate(Method = "Spearman",
Group = paste(Trait, Sex),
Cutoff = as.factor(ifelse(P < 0.05, 0, 1)))
stats_text <- cor_spearman %>%
group_by(Trait, Sex) %>%
mutate(nl = paste0("n = ", length(unique(Lab1)) + 1),
nc = paste0("nc = ", n()),
ncs = paste0("ncs = ", sum(Cutoff == 0))) %>%
ungroup() %>%
mutate(ymax = max(-log10(P)),
xmin = min(R)) %>%
select(Group, nl, nc, ncs, xmin, ymax) %>%
distinct()
pop_cor <- ggplot(cor_spearman, aes(x = R, y = -log10(P))) +
geom_hline(yintercept = -log10(0.05), linetype = 2, size = 0.5, col = "red") +
geom_vline(xintercept = 0, size = 0.5, col = "grey80") +
geom_point(aes(fill = Cutoff), size = 2, pch = 21, color = "black") +
facet_wrap(Group ~ ., ncol = 7) +
scale_x_continuous(breaks = c(-0.5, 0, 0.5, 0.75)) +
theme_bw(14) +
labs(x = "Spearman's correlation coefficient", title = "Pairwise lab correlations - Population level - Spearman's coefficients") +
theme(legend.position = "none",
panel.grid = element_blank()) +
geom_text(data = stats_text, aes(label = paste(nl, nc, ncs, sep = "\n"), x = xmin, y = ymax), hjust = 0, vjust = 1, size = 3.5)
##### save facet plot
ggsave(pop_cor, filename = "LabCorrelations/lab_correlation_pop_spearman.pdf", width = 11.69, height = 8.27)
estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "pop_model_estimates.rds")
estimates <- estimates[-grep("LA_lmers", estimates)]
estimates <- estimates[-grep("Dia_lmers", estimates)]
cor_pearson <- list()
for (i in 1:length(estimates)) {
# get data in and reformat
f <- estimates[i]
e <- readRDS(f) %>%
dplyr::select(Trait, Sex, Population, Lab, Estimate) %>%
pivot_wider(names_from = c("Lab"), values_from = Estimate) %>%
group_split(Trait, Sex)
# get correlations
co <- list()
for (j in 1:length(e)) {
cols_ok <- !apply(e[[j]], 2, function(x) all(is.na(x)))
e_sub <- dplyr::select(e[[j]], names(cols_ok)[cols_ok])
if (ncol(e_sub) > 4) {
if (ncol(e_sub) == 5) {
co[[j]] <- cor_test(e_sub, -c(Sex, Population, Trait), method = "pearson")
} else {
co[[j]] <- cor_mat(e_sub, -c(Sex, Population, Trait), method = "pearson") %>% cor_gather()
}
co[[j]] <- filter(co[[j]], var1 != var2) %>%
rename(Lab1 = var1, Lab2 = var2, R = cor, P = p) %>%
mutate(Sex = unique(e_sub$Sex),
Trait = unique(e_sub$Trait)) %>%
dplyr::select(Trait, Sex, Lab1, Lab2, R, P)
co[[j]]$Labs <- "NA"
for (r in 1:nrow(co[[j]])) {
co[[j]]$Labs[r] <- co[[j]][r, c("Lab1", "Lab2")] %>%
unlist %>% sort %>% paste(collapse = "_")
}
co[[j]] <- group_by(co[[j]], Trait, Sex, Labs) %>%
distinct(Labs, .keep_all = TRUE)
}
}
cor_pearson[[i]] <- bind_rows(co)
}
cor_pearson <- bind_rows(cor_pearson)
cor_pearson <- cor_pearson %>%
mutate(Method = "Pearson",
Group = paste(Trait, Sex),
Cutoff = as.factor(ifelse(P < 0.05, 0, 1)))
###### modify below
stats_text <- cor_pearson %>%
group_by(Trait, Sex) %>%
mutate(nl = paste0("n = ", length(unique(Lab1)) + 1),
nc = paste0("nc = ", n()),
ncs = paste0("ncs = ", sum(Cutoff == 0))) %>%
ungroup() %>%
mutate(ymax = max(-log10(P)),
xmin = min(R)) %>%
select(Group, nl, nc, ncs, xmin, ymax) %>%
distinct()
pop_cor <- ggplot(cor_pearson, aes(x = R, y = -log10(P))) +
geom_hline(yintercept = -log10(0.05), linetype = 2, size = 0.5, col = "red") +
geom_vline(xintercept = 0, size = 0.5, col = "grey80") +
geom_point(aes(fill = Cutoff), size = 2, pch = 21, color = "black") +
facet_wrap(Group ~ ., ncol = 7) +
scale_x_continuous(breaks = c(-0.5, 0, 0.5, 1)) +
theme_bw(14) +
labs(x = "Pearson's correlation coefficient", title = "Pairwise lab correlations - Population level - Pearson's coefficients") +
theme(legend.position = "none",
panel.grid = element_blank()) +
geom_text(data = stats_text, aes(label = paste(nl, nc, ncs, sep = "\n"), x = xmin, y = ymax), hjust = 0, vjust = 1, size = 3.5)
######### modify above
##### save facet plot
ggsave(pop_cor, filename = "LabCorrelations/lab_correlation_pop_pearson.pdf", width = 11.69, height = 8.27)
########### POP LEVEL SPEARMAN ##########
estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "pop_model_estimates.rds")
estimates <- estimates[-grep("LA_lmers", estimates)]
estimates <- estimates[-grep("Dia_lmers", estimates)]
cor_spearman <- list()
for (i in 1:length(estimates)) {
# get data in and reformat
f <- estimates[i]
e <- readRDS(f) %>%
dplyr::select(Trait, Sex, Population, Lab, Estimate) %>%
pivot_wider(names_from = c("Lab"), values_from = Estimate) %>%
group_split(Trait, Sex)
# get correlations
co <- list()
for (j in 1:length(e)) {
cols_ok <- !apply(e[[j]], 2, function(x) all(is.na(x)))
e_sub <- dplyr::select(e[[j]], names(cols_ok)[cols_ok])
if (ncol(e_sub) > 4) {
if (ncol(e_sub) == 5) {
co[[j]] <- cor_test(e_sub, -c(Sex, Population, Trait), method = "spearman")
} else {
co[[j]] <- cor_mat(e_sub, -c(Sex, Population, Trait), method = "spearman") %>% cor_gather()
}
co[[j]] <- filter(co[[j]], var1 != var2) %>%
rename(Lab1 = var1, Lab2 = var2, R = cor, P = p) %>%
mutate(Sex = unique(e_sub$Sex),
Trait = unique(e_sub$Trait)) %>%
dplyr::select(Trait, Sex, Lab1, Lab2, R, P)
co[[j]]$Labs <- "NA"
for (r in 1:nrow(co[[j]])) {
co[[j]]$Labs[r] <- co[[j]][r, c("Lab1", "Lab2")] %>%
unlist %>% sort %>% paste(collapse = "_")
}
co[[j]] <- group_by(co[[j]], Trait, Sex, Labs) %>%
distinct(Labs, .keep_all = TRUE)
}
}
cor_spearman[[i]] <- bind_rows(co)
}
cor_spearman <- bind_rows(cor_spearman)
cor_spearman <- cor_spearman %>%
mutate(Method = "Spearman",
Group = paste(Trait, Sex),
Cutoff = as.factor(ifelse(P < 0.05, 0, 1)))
stats_text <- cor_spearman %>%
group_by(Trait, Sex) %>%
mutate(nl = paste0("n = ", length(unique(Lab1)) + 1),
nc = paste0("nc = ", n()),
ncs = paste0("ncs = ", sum(Cutoff == 0))) %>%
ungroup() %>%
mutate(ymax = max(-log10(P)),
xmin = min(R)) %>%
select(Group, nl, nc, ncs, xmin, ymax) %>%
distinct()
pop_cor <- ggplot(cor_spearman, aes(x = R, y = -log10(P))) +
geom_hline(yintercept = -log10(0.05), linetype = 2, size = 0.5, col = "red") +
geom_vline(xintercept = 0, size = 0.5, col = "grey80") +
geom_point(aes(fill = Cutoff), size = 2, pch = 21, color = "black") +
facet_wrap(Group ~ ., ncol = 7) +
scale_x_continuous(breaks = c(-0.5, 0, 0.5, 1)) +
theme_bw(14) +
labs(x = "Spearman's correlation coefficient", title = "Pairwise lab correlations - Population level - Spearman's coefficients") +
theme(legend.position = "none",
panel.grid = element_blank()) +
geom_text(data = stats_text, aes(label = paste(nl, nc, ncs, sep = "\n"), x = xmin, y = ymax), hjust = 0, vjust = 1, size = 3.5)
##### save facet plot
ggsave(pop_cor, filename = "LabCorrelations/lab_correlation_pop_spearman.pdf", width = 11.69, height = 8.27)
estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "pop_model_estimates.rds")
estimates
line_estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "lmers_line_random_coefs.rds")
line_estimates
line_estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "lmers_line_random_coefs.rds")
line_estimates <- line_estimates[-grep("Dia_lmers", line_estimates)]
i
f <- estimates[i]
e <- readRDS(f)
f
f <- line_estimates[i]
e <- readRDS(f)
f
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
head(e)
ts_out_pdf
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
rlang::last_error()
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor == "NA")
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
head(e)
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA")
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
ts
longToWide2(filter(ts[[j]], Trait == unique(ts[[j]]$Trait)))
# turn long table to wide for correlations matrices
longToWide2 <- function(estimates) {
ltw <- dplyr::select(estimates, -c(SE, Trait, Model, Predictor)) %>%
pivot_wider(names_from = c(Lab, Sex), names_sep = "_", values_from = Estimate) %>%
#mutate(Population = factor(Population, levels = c("YE","RE","GI","MU","MA","UM","KA","VA","AK"))) %>%
arrange(Population) %>%
dplyr::select(!Population)
if ("Line" %in% colnames(ltw)) { dplyr::select(ltw, !Line) }
}
longToWide2(filter(ts[[j]], Trait == unique(ts[[j]]$Trait)))
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
# define the appearance of the scatter plots in pairs2
panScatterPlot <- function(x, y, bg.col = met.brewer("Johnson", 9)){
if (length(x) > 9) { bg.col = "black" }
points(x, y, pch = 21, cex = 1.8, bg = bg.col)
abline(lm(y~x))
}
line_estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "lmers_line_random_coefs.rds")
line_estimates <- line_estimates[-grep("Dia_lmers", line_estimates)]
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
scatterPlotMatrix <- function(x, sex) {
require(MetBrewer)
x <- longToWide2(x)
if (!missing(sex)) { x <- prepScatterPlotMatrix2(x, sex = sex) }
else { x <- prepScatterPlotMatrix2(x) }
par(las = 2)
par(cex.axis = 1.6)
pairs2(x, lower.panel = panScatterPlot, upper.panel = panCor, oma = c(6.5,4.5,2,4), ax.labels = TRUE, ax.ticks = TRUE, gap = 1)
if (nrow(x) <= 9) {
legend("bottom", xjust = 0.5, inset = -ncol(x)*0.012, legend = c("AK", "GI", "KA", "MA", "MU", "RE", "UM", "VA", "YE"), pch = 21, pt.cex = 2, pt.bg = met.brewer("Johnson", 9), horiz = T, cex = 0.8, bty = "n", xpd = T) }
}
line_estimates <- list.files(path = "LinearModelsPop", recursive = T, full.names = T, pattern = "lmers_line_random_coefs.rds")
line_estimates <- line_estimates[-grep("Dia_lmers", line_estimates)]
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
# define the appearance of the scatter plots in pairs2
panScatterPlot <- function(x, y, bg.col = met.brewer("Johnson", 9)){
if (length(x) > 9) {
bg.col = "black"
cex = 1.6 }
else {
cex = 1.8
}
points(x, y, pch = 21, cex = cex, bg = bg.col)
abline(lm(y~x))
}
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
# define the appearance of the scatter plots in pairs2
panScatterPlot <- function(x, y, bg.col = met.brewer("Johnson", 9)){
if (length(x) > 9) {
bg.col = "black"
cex = 1.4 }
else {
cex = 1.8
}
points(x, y, pch = 21, cex = cex, bg = bg.col)
abline(lm(y~x))
}
for (i in 1:length(line_estimates)){
f <- line_estimates[i]
e <- readRDS(f) %>% mutate(Predictor = "NA") %>% rename(Estimate = Coef)
if (length(unique(e$Lab)) > 1) {
d_out <- sub("LinearModelsPop", cor_dir, f)
d_out <- str_match(d_out, '(.*[^/]+)(?:/[^/]+){1}$')[,2]
dir.create(d_out, showWarnings = F)
ts <- group_split(e, Trait, Sex)
for (j in 1:length(ts)){
if (length(unique(ts[[j]]$Lab)) > 1) {
ts_out_pdf <- file.path(d_out, paste0(unique(ts[[j]]$Trait), "_", unique(ts[[j]]$Sex), "_", unique(ts[[j]]$Model), "_lab_line_pearson_correlations.pdf"))
pdf(ts_out_pdf)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
ts_out_png <- sub("pdf", "png", ts_out_pdf)
png(ts_out_png, 2100, 2100, res = 300)
scatterPlotMatrix(filter(ts[[j]], Trait == unique(ts[[j]]$Trait), Sex == unique(ts[[j]]$Sex)))
dev.off()
}
}
}
}
